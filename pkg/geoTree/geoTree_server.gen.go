// Package geoTree provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package geoTree

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List returns a list of geoTree
	// (GET /geoTree)
	List(ctx echo.Context, params ListParams) error
	// Create will create a new geoTree
	// (POST /geoTree)
	Create(ctx echo.Context) error
	// Count returns the number of geoTree based on search criterias
	// (GET /geoTree/count)
	Count(ctx echo.Context, params CountParams) error
	// List returns a geoJson of geoTrees found
	// (GET /geoTree/geojson)
	GeoJson(ctx echo.Context, params GeoJsonParams) error
	// Update allows to modify goeland_thing_id information about a specific geoTreeId
	// (PUT /geoTree/setGoelandThingId/{geoTreeId})
	UpdateGoelandThingId(ctx echo.Context, geoTreeId openapi_types.UUID) error
	// Delete allows to delete a specific geoTreeId
	// (DELETE /geoTree/{geoTreeId})
	Delete(ctx echo.Context, geoTreeId openapi_types.UUID) error
	// Get will retrieve in backend all information about a specific geoTreeId
	// (GET /geoTree/{geoTreeId})
	Get(ctx echo.Context, geoTreeId openapi_types.UUID) error
	// Update allows to modify information about a specific geoTreeId
	// (PUT /geoTree/{geoTreeId})
	Update(ctx echo.Context, geoTreeId openapi_types.UUID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// List converts echo context to params.
func (w *ServerInterfaceWrapper) List(ctx echo.Context) error {
	var err error

	ctx.Set(JWTAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListParams
	// ------------- Optional query parameter "cada_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "cada_date", ctx.QueryParams(), &params.CadaDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cada_date: %s", err))
	}

	// ------------- Optional query parameter "created_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "created_by", ctx.QueryParams(), &params.CreatedBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter created_by: %s", err))
	}

	// ------------- Optional query parameter "deleted" -------------

	err = runtime.BindQueryParameter("form", true, false, "deleted", ctx.QueryParams(), &params.Deleted)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter deleted: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.List(ctx, params)
	return err
}

// Create converts echo context to params.
func (w *ServerInterfaceWrapper) Create(ctx echo.Context) error {
	var err error

	ctx.Set(JWTAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Create(ctx)
	return err
}

// Count converts echo context to params.
func (w *ServerInterfaceWrapper) Count(ctx echo.Context) error {
	var err error

	ctx.Set(JWTAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CountParams
	// ------------- Optional query parameter "cada_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "cada_date", ctx.QueryParams(), &params.CadaDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cada_date: %s", err))
	}

	// ------------- Optional query parameter "created_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "created_by", ctx.QueryParams(), &params.CreatedBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter created_by: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Count(ctx, params)
	return err
}

// GeoJson converts echo context to params.
func (w *ServerInterfaceWrapper) GeoJson(ctx echo.Context) error {
	var err error

	ctx.Set(JWTAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GeoJsonParams
	// ------------- Optional query parameter "cada_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "cada_date", ctx.QueryParams(), &params.CadaDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cada_date: %s", err))
	}

	// ------------- Optional query parameter "created_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "created_by", ctx.QueryParams(), &params.CreatedBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter created_by: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GeoJson(ctx, params)
	return err
}

// UpdateGoelandThingId converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateGoelandThingId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "geoTreeId" -------------
	var geoTreeId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "geoTreeId", ctx.Param("geoTreeId"), &geoTreeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter geoTreeId: %s", err))
	}

	ctx.Set(JWTAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateGoelandThingId(ctx, geoTreeId)
	return err
}

// Delete converts echo context to params.
func (w *ServerInterfaceWrapper) Delete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "geoTreeId" -------------
	var geoTreeId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "geoTreeId", ctx.Param("geoTreeId"), &geoTreeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter geoTreeId: %s", err))
	}

	ctx.Set(JWTAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Delete(ctx, geoTreeId)
	return err
}

// Get converts echo context to params.
func (w *ServerInterfaceWrapper) Get(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "geoTreeId" -------------
	var geoTreeId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "geoTreeId", ctx.Param("geoTreeId"), &geoTreeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter geoTreeId: %s", err))
	}

	ctx.Set(JWTAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Get(ctx, geoTreeId)
	return err
}

// Update converts echo context to params.
func (w *ServerInterfaceWrapper) Update(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "geoTreeId" -------------
	var geoTreeId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "geoTreeId", ctx.Param("geoTreeId"), &geoTreeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter geoTreeId: %s", err))
	}

	ctx.Set(JWTAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Update(ctx, geoTreeId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/geoTree", wrapper.List)
	router.POST(baseURL+"/geoTree", wrapper.Create)
	router.GET(baseURL+"/geoTree/count", wrapper.Count)
	router.GET(baseURL+"/geoTree/geojson", wrapper.GeoJson)
	router.PUT(baseURL+"/geoTree/setGoelandThingId/:geoTreeId", wrapper.UpdateGoelandThingId)
	router.DELETE(baseURL+"/geoTree/:geoTreeId", wrapper.Delete)
	router.GET(baseURL+"/geoTree/:geoTreeId", wrapper.Get)
	router.PUT(baseURL+"/geoTree/:geoTreeId", wrapper.Update)

}
